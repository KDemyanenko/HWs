fn main() {
    let x = String::from("Hello world");
    let y = x.clone(); // Клонування рядка, щоб створити нову власність

    println!("{}, {}", x, y);
}
--------------------------------------------------------------------------------------------------------
fn main() {
    let s1 = String::from("Hello world");
    let s2 = take_ownership(s1);

    println!("{}", s2);
}

fn take_ownership(s: String) -> String { // Додав повернення типу String
    println!("{}", s);
    s // Повертаємо власність назад
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let s = give_ownership();
    println!("{}", s);
}

fn give_ownership() -> String {
    let s = String::from("Hello world");
    let _s = s.clone(); // Клонуємо рядок, щоб зберегти його оригінал
    s // Повертаємо оригінальний рядок
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let s = String::from("Hello World");

    print_str(s.clone()); // Клонуємо рядок передаєм його в print_str

    println!("{}", s);
}

fn print_str(s: String) {
    println!("{}", s);
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let x = (1, 2, (), "hello");
    let y = x;  // Операція копіювання, оскільки всі типи в кортежі мають Copy trait
    println!("{:?}, {:?}", x, y);
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("Hello "); // Зроблено змінною

    let s1 = s; 

    // s1 повинна бути також змінною
    let mut s1 = s1; // Зроблено змінною

    s1.push_str("World!");

    println!("Success!");
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let x = Box::new(5);
    
    let y = x; // Оновлено: `y` тепер є власником `Box` з `5`
    
    *y = 4; // Змінюємо значення, на яке вказує `y`
    
    assert_eq!(*x, 5); // Це викликатиме паніку, тому що `x` більше не є власником
    // Якщо потрібно перевірити значення через `y`, змініть цю строку на `assert_eq!(*y, 4);`

    println!("Success!");
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let t = (String::from("hello"), String::from("world"));

    let _s = t.0;

    // Змінено на `println!("{:?}", t.1);`
    println!("{:?}", t.1);
}

--------------------------------------------------------------------------------------------------------
fn main() {
    let t = (String::from("hello"), String::from("world"));

    // Заповнено пропуски
    let (s1, s2) = t.clone(); // Клонування `t`, щоб зберегти оригінал

    println!("{:?}, {:?}, {:?}", s1, s2, t); // -> "hello", "world", ("hello", "world")
}

