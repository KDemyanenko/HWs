fn main() {
    let arr = [1, 2, 3];
    // Змінив тип слайсу на &[_] для масиву
    let s1: &[i32] = &arr[0..2]; // Тепер s1 - це слайс

    // Змінив тип на &str, оскільки str не може бути використано без посилання
    let s2: &str = "hello, world"; // Тепер s2 - це слайс рядка

    println!("Success!");
}
---------------------------------------------------------------------------------------------------------
fn main() {
    let arr: [char; 3] = ['中', '国', '人'];

    let slice = &arr[..2];
    
    // Змінив '8' на '16', оскільки слайс з двох символів займає 2 * 4 байти
    assert!(std::mem::size_of_val(&slice) == 16); // Розмір слайсу з двох символів '中' і '国'

    println!("Success!");
}

---------------------------------------------------------------------------------------------------------
fn main() {
    let arr: [i32; 5] = [1, 2, 3, 4, 5];
    // Заповнено пропуски для створення зрізу
    let slice: &[i32] = &arr[1..4]; // Використовуємо зріз з елементів з індексами 1 по 3
    assert_eq!(slice, &[2, 3, 4]);

    println!("Success!");
}

---------------------------------------------------------------------------------------------------------
fn main() {
    let s = String::from("hello");

    let slice1 = &s[0..2];
    // Заповнено пропуск, щоб створити зріз, який є рівноцінним slice1
    let slice2 = &s[..2]; // Використано зріз з початку до індексу 2

    assert_eq!(slice1, slice2);

    println!("Success!");
}

---------------------------------------------------------------------------------------------------------
fn main() {
    let s = "你好，世界";
    // Модифіковано цей рядок для створення байтового зрізу
    let slice = &s[0..3]; // "你" займає 3 байти

    assert!(slice == "你");

    println!("Success!");
}

---------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello world");

    // Тепер `first_letter` повертає String
    let letter = first_letter(&s);

    s.clear(); // Це більше не викликає помилки

    println!("the first letter is: {}", letter);
}

fn first_letter(s: &str) -> String {
    s[..1].to_string() // Повертаємо `String` замість `&str`
}
