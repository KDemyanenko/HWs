struct Person {
    name: String,
    age: u8,
    hobby: String,
}

fn main() {
    let age = 30;
    let p = Person {
        name: String::from("sunface"),
        age,
        hobby: String::from("coding"), // Додано відсутнє поле hobby
    };

    println!("Success!");
}

------------------------------------------------------------------------------------------------------
struct Unit;

trait SomeTrait {
}

// Ми не турбуємося про поля в Unit, але нас цікавлять його поведінки.
// Тому ми використовуємо структуру без полів і реалізуємо для неї деякі поведінки
impl SomeTrait for Unit { }

fn main() {
    let u = Unit;
    do_something_with_unit(u);

    println!("Success!");
}

// Заповніть пропуск, щоб код працював
fn do_something_with_unit(u: Unit) { } // Змінив тип параметра на Unit

------------------------------------------------------------------------------------------------------
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let v = Point(0, 127, 255); // Заповнив пропуски конкретними значеннями
    check_color(Color(v.0, v.1, v.2)); // Передав значення з Point в Color

    println!("Success!");
}

fn check_color(p: Color) {
    let (x, y, z) = p; // Деструктуризація Color
    assert_eq!(x, 0);
    assert_eq!(y, 127); // Змінено з p.1 на y
    assert_eq!(z, 255); // Змінено з __ на z
}

------------------------------------------------------------------------------------------------------
struct Person {
    name: String,
    age: u8,
}

fn main() {
    let age = 18;
    let mut p = Person { // Додав ключове слово mut, щоб зробити структуру змінною
        name: String::from("sunface"),
        age,
    };

    // How can you believe sunface is only 18? 
    p.age = 30; // Зміна значення поля age

    // Fill the blank
    p.name = String::from("sunfei"); // Змінив на p.name, щоб присвоїти нове значення полю name

    println!("Success!");
}

------------------------------------------------------------------------------------------------------
struct Person {
    name: String,
    age: u8,
}

fn main() {
    println!("Success!");
} 

fn build_person(name: String, age: u8) -> Person {
    Person {
        age,
        name, // Використано скорочення для ініціалізації поля name
    }
}

------------------------------------------------------------------------------------------------------
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

fn main() {
    let u1 = User {
        email: String::from("someone@example.com"),
        username: String::from("sunface"),
        active: true,
        sign_in_count: 1,
    };

    let u2 = set_email(u1);

    println!("Success!");
} 

fn set_email(u: User) -> User {
    User {
        email: String::from("contact@im.dev"),
        // Використано синтаксис оновлення структури для копіювання інших полів
        active: u.active,
        username: u.username,
        sign_in_count: u.sign_in_count,
    }
}

------------------------------------------------------------------------------------------------------
#[derive(Debug)] // Додаємо деривацію для отримання можливості друку структури
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale), // Друкуємо інформацію для налагодження та присвоюємо значення `30 * scale` для `width`
        height: 50,
    };

    dbg!(&rect1); // Друкуємо інформацію для налагодження

    println!("{:?}", rect1); // Друкуємо інформацію про `rect1`
}

------------------------------------------------------------------------------------------------------
#[derive(Debug)]
struct File {
    name: String,
    data: String,
}

fn main() {
    let f = File {
        name: String::from("readme.md"),
        data: "Rust By Practice".to_string(),
    };

    let _name = f.name.clone(); // Клонуємо `name`, щоб зберегти доступ до оригіналу `f`

    println!("{}, {}, {:?}", _name, f.data, f); // Використовуємо `_name` замість `f.name`
}

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
