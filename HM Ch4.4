fn main() {
    let (x, y) = (1, 2);
    let s = sum(x, y);

    assert_eq!(s, 3);

    println!("Success!");
}

fn sum(x: i32, y: i32) -> i32 { // Додав тип x: i32 і y: i32, а також повернення i32
    x + y // Видалив крапку з комою, щоб значення поверталося
}
-----------------------------------------------------------------------------------------------------
fn main() {
   print();
}

fn print() -> () { // Змінив i32 на ()
   println!("Success!");
}

-----------------------------------------------------------------------------------------------------
fn main() {
    never_return();

    println!("Failed!");
}

fn never_return() -> ! {
    loop {} // Безкінечний цикл, що не дозволяє повернутися з функції
}

-----------------------------------------------------------------------------------------------------
fn main() {
    println!("Success!");
}

fn get_option(tp: u8) -> Option<i32> {
    match tp {
        1 => Some(42),
        _ => {
            never_return_fn()
        }
    }
}

fn never_return_fn() -> ! {
    loop {} // Безкінечний цикл, що не дозволяє повернутися
}

-----------------------------------------------------------------------------------------------------
fn main() {
    let b = false; // Заповнив пропуск значенням false

    let _v = match b {
        true => 1,
        false => {
            println!("Success!");
            never_return_fn() // Виклик функції, яка ніколи не повертається
        }
    };

    println!("Exercise Failed if printing out this line!");
}

fn never_return_fn() -> ! {
    panic!("we have no value for `false`, but we can panic");
}

