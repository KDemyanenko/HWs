fn main() {
    let n = 5;

    if n < 0 {
        println!("{} is negative", n);
    } else if n > 0 { // Додано `else if` для перевірки, чи є число позитивним
        println!("{} is positive", n);
    } else { // Додано `else` для випадку, якщо число дорівнює нулю
        println!("{} is zero", n);
    }
}
-------------------------------------------------------------------------------------------------------------------
fn main() {
    let n = 5;

    let big_n = 
        if n < 10 && n > -10 {
            println!(", and is a small number, increase ten-fold");

            10 * n // Повертаємо результат множення на 10
        } else {
            println!(", and is a big number, halve the number");

            n / 2.0 // Повертаємо результат ділення на 2.0
        };

    println!("{} -> {}", n, big_n);
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    for n in 1..100 { // Змінили діапазон на 1..100, щоб не включати 100
        if n == 100 {
            panic!("NEVER LET THIS RUN")
        }
    }

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
// Виправимо помилки без додавання або видалення рядків
fn main() {
    let names = [String::from("liming"), String::from("hanmeimei")];
    for name in &names { // Використано &names, щоб передати посилання на елементи
        // Щось робимо з name...
    }

    println!("{:?}", names);

    let numbers = [1, 2, 3];
    // Елементи в numbers є Copy, тому тут немає переміщення
    for n in numbers {
        // Щось робимо з n...
    }
    
    println!("{:?}", numbers);
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let a = [4, 3, 2, 1];

    // Ітеруємо по індексах та значеннях у масиві 'a'
    for (i, v) in a.iter().enumerate() { // Використано .iter().enumerate() для отримання пар (індекс, значення)
        println!("The {}th element is {}", i + 1, v);
    }
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    // Лічильник
    let mut n = 1;

    // Цикл, поки умова істинна
    while n <= 10 { // Заповнено пропуск, щоб цикл тривав, поки n менше або дорівнює 10
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        n += 1; // Заповнено пропуск, щоб збільшити значення n на 1 в кожній ітерації
    }

    println!("n reached {}, so loop is over", n);
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut n = 0;
    for i in 0..=100 {
        if n == 66 {
            break; // Додано оператор break для виходу з циклу, коли n досягне 66
        }
        n += 1;
    }

    assert_eq!(n, 66);

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut n = 0;
    for i in 0..=100 {
        if n != 66 {
            n += 1;
            continue; // Додано continue, щоб пропустити решту коду в цій ітерації, якщо n не дорівнює 66
        }

        // Цей код буде виконано тільки якщо n дорівнює 66
    }

    assert_eq!(n, 66);

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut count = 0u32;

    println!("Let's count until infinity!");

    // Нескінченний цикл
    loop {
        count += 1;

        if count == 3 {
            println!("three");

            // Пропускаємо решту цієї ітерації
            continue; // Додано continue, щоб перейти до наступної ітерації
        }

        println!("{}", count);

        if count == 5 {
            println!("OK, that's enough");

            break; // Додано break, щоб вийти з циклу
        }
    }

    assert_eq!(count, 5);

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2; // Додано break з поверненням значення counter * 2
        }
    };

    assert_eq!(result, 20);

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut count = 0;
    'outer: loop {
        'inner1: loop {
            if count >= 20 {
                // Це перерве лише цикл inner1
                break 'inner1; // `break` також працює.
            }
            count += 2;
        }

        count += 5;

        'inner2: loop {
            if count >= 30 {
                // Це перерве зовнішній цикл
                break 'outer;
            }

            // Це пропустить ітерацію зовнішнього циклу
            continue 'outer;
        }
    }

    assert!(count == 30); // Заповнено пусте місце

    println!("Success!");
}

