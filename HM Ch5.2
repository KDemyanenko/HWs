fn main() {
    let x = 5;
    // Заповнено пропуск
    let p = &x;

    println!("the memory address of x is {:p}", p); 
}
-------------------------------------------------------------------------------------------------------------------
fn main() {
    let x = 5;
    let y = &x;

    // Виправлено
    assert_eq!(5, *y); // Дереференція, щоб порівняти значення за посиланням

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    borrow_object(&s); // Передаємо посилання на рядок замість володіння

    println!("Success!");
}

fn borrow_object(s: &String) {} // Приймаємо посилання на рядок

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    push_str(&mut s); // Передаємо мутабельне посилання на рядок

    println!("Success!");
}

fn push_str(s: &mut String) {
    s.push_str("world");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    // Заповнюємо пропуск, щоб це працювало
    let p = &mut s;  // Створюємо мутабельне посилання на `s`
    
    p.push_str("world");

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let c = '中';

    let r1 = &c;
    // Заповнюємо пропуск, не змінюючи інший код
    let ref r2 = c;  // Використовуємо посилання на `c`

    assert_eq!(*r1, *r2);
    
    // Перевіряємо рівність двох рядків адрес
    assert_eq!(get_addr(r1), get_addr(r2));

    println!("Success!");
}

// Отримуємо рядок з адресою в пам'яті
fn get_addr(r: &char) -> String {
    format!("{:p}", r)
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello");

    let r1 = &mut s;
    // Видаляємо друге змінне посилання `r2`
    println!("{}", r1);

    println!("Success!");
}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    // Додано mut, щоб змінна s була змінною
    let mut s = String::from("hello, ");

    borrow_object(&mut s);

    println!("Success!");
}

fn borrow_object(s: &mut String) {}
-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    borrow_object(&s);  // Незмінне позичення

    s.push_str("world");  // Змінне використання, тепер дозволено, оскільки немає активного позичення

    println!("Success!");
}

fn borrow_object(s: &String) {}

-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    let r1 = &mut s;
    r1.push_str("world");
    // let r2 = &mut s; // Закоментуйте цей рядок
    // r2.push_str("!");

    println!("{}", r1);
}
-------------------------------------------------------------------------------------------------------------------
fn main() {
    let mut s = String::from("hello, ");

    let r1 = &mut s;
    let r2 = &mut s;

    r1.push_str("world"); // Використання r1
    r2.push_str("!"); // Використання r2

    println!("{}, {}", r1, r2); // Виклик r1 і r2 одночасно
}

-------------------------------------------------------------------------------------------------------------------

